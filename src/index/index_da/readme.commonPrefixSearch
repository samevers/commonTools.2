[GUIDE OF USING CommonPrefixSearch OPERATION.]
LET'S START THE CODE:

			Darts::DoubleArray::result_type all_result[kMaxCommonPrefixNum];
			vector<string> vec;
			// prefix search
			for(int i =0; i < strlen(query); i++)
			{
				size_t result_num =	// commonPrefixSearch 从query的第i个位置开始，找到的所有在词典中的query 子串的数目；
					WhiteList_da->commonPrefixSearch(
						query + i, 		all_result, 	kMaxCommonPrefixNum);	// all_result: 子串在词典中的位置，即第几个词；代码中的那个num。
				if(result_num > kMaxCommonPrefixNum)
				{
					result_num = kMaxCommonPrefixNum;
				}
				for(size_t j = 0; j < result_num; j++) // 对于每一个匹配到的 subquery
				{
					ret_value = all_result[j];
					if(ret_value > WhiteList_buf_querylen_len)
					{
						SS_DEBUG((LM_INFO, "[QueryClass::%s][%016llx] ret_value > WhiteList_buf_querylen_len, continue\n", __FUNCTION__, worker->request_id));
						continue;
					}
					if(begin_end_white_vr[ret_value].begin > WhiteList_buf_vr_len)
					{
						SS_DEBUG((LM_INFO, "[QueryClass::%s][%016llx] begin_end_white_vr[ret_value].begin > WhiteList_buf_vr_len, continue\n", __FUNCTION__, worker->request_id));
						continue;
					}
					//cerr << "[debug_sam] 匹配到的commonPrefixSearch 内容，即 query_len = " << WhiteList_buf_querylen[ret_value] << endl;
					if(seg_position[i + WhiteList_buf_querylen[ret_value]] < 1)// 不在分词线上，直接略过
					{
						SS_DEBUG((LM_INFO, "[QueryClass::%s][%016llx] ret_value th result is not on segmentation point ....\n", __FUNCTION__, worker->request_id));
						continue;
					}
					// pre
					if(i == 0 && i + WhiteList_buf_querylen[ret_value] < strlen(query) ) 
					{
						Judge_white_black(query, ret_value, classmap, 1, "pre", worker);
					}
					// part
					if(i > 0 && i + WhiteList_buf_querylen[ret_value] < strlen(query) )
					{
						Judge_white_black(query, ret_value, classmap, 1, "part", worker);
					}
					// sub
					if( i > 0 && i + WhiteList_buf_querylen[ret_value] == strlen(query) )
					{
						Judge_white_black(query, ret_value, classmap, 1, "sub", worker);
					}
				}
			}


